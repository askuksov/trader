services:
  # Backend (Go API Server)
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
      target: production
    container_name: trader-backend-prod
    ports:
      - "8080:8080"
    env_file:
      - .env
      - .env.local
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - trader-network

  # Frontend (React)
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
      target: production
    container_name: trader-frontend-prod
    ports:
      - "80:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - trader-network

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: trader-mysql-prod
    ports:
      - "3306:3306"
    env_file:
      - .env
      - .env.local
    volumes:
      - mysql_data_prod:/var/lib/mysql
      - ../scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    command: --default-authentication-plugin=mysql_native_password --innodb-buffer-pool-size=1G
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - trader-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: trader-redis-prod
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    env_file:
      - .env
      - .env.local
    volumes:
      - redis_data_prod:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - trader-network

  # ML Service
  ml-service:
    build:
      context: ../ml-service
      dockerfile: Dockerfile
    container_name: trader-ml-service-prod
    ports:
      - "5000:5000"
    env_file:
      - .env
      - .env.local
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - trader-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: trader-prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data_prod:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION}'
      - '--web.enable-lifecycle'
      - '--web.external-url=http://localhost:9090'
    env_file:
      - .env
      - .env.local
    depends_on:
      - backend
      - ml-service
    restart: unless-stopped
    networks:
      - trader-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: trader-grafana-prod
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=false
    volumes:
      - ../monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ../monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana_data_prod:/var/lib/grafana
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - trader-network

volumes:
  mysql_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  prometheus_data_prod:
    driver: local
  grafana_data_prod:
    driver: local

networks:
  trader-network:
    driver: bridge
