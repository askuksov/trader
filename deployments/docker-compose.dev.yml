services:
  # Backend (Go API Server)
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
      target: development
    container_name: trader-backend-dev
    ports:
      - "8080:8080"
      - "40000:40000" # debug port
    volumes:
      - ../backend:/app
    env_file:
      - .env
      - .env.local
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - trader-network

  backend-test:
    build:
      context: ../backend
      dockerfile: Dockerfile
      target: test
    volumes:
      - ../backend:/app
    command: [ "go", "test", "./tests/unit/...", "./tests/security/...", "./tests/integration/...", "./tests/performance/..." ]

  # Frontend (React)
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
      target: development
    container_name: trader-frontend-dev
    ports:
      - "3000:3000"
    volumes:
      - ../frontend:/app
      - /app/node_modules
    env_file:
      - .env
      - .env.local
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - trader-network

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: trader-mysql-dev
    expose:
      - "3306"
    env_file:
      - .env
      - .env.local
    volumes:
      - mysql_data:/var/lib/mysql
      - ../scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - trader-network

  # Adminer (Database Management UI)
  adminer:
    image: adminer:4.8.1
    container_name: trader-adminer-dev
    ports:
      - "8081:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=mysql
      - ADMINER_DESIGN=${ADMINER_DESIGN}
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - trader-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: trader-redis-dev
    expose:
      - "6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    env_file:
      - .env
      - .env.local
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - trader-network

  # ML Service (Stub)
  ml-service:
    build:
      context: ../ml-service
      dockerfile: Dockerfile
    container_name: trader-ml-service-dev
    ports:
      - "5000:5000"
    volumes:
      - ../ml-service:/app
    env_file:
      - .env
      - .env.local
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - trader-network

  # Mailpit (Email Testing)
  mailpit:
    image: axllent/mailpit:v1.8
    container_name: trader-mailpit-dev
    expose:
      - "1025"  # SMTP server - internal only
    ports:
      - "8025:8025"  # Web UI - external access needed
    environment:
      - MP_SMTP_AUTH_ACCEPT_ANY=1
      - MP_SMTP_AUTH_ALLOW_INSECURE=1
    networks:
      - trader-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: trader-prometheus-dev
    ports:
      - "9091:9090"
    volumes:
      - ../monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION}'
      - '--web.enable-lifecycle'
    env_file:
      - .env
      - .env.local
    depends_on:
      - backend
      - ml-service
    networks:
      - trader-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: trader-grafana-dev
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ../monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ../monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - trader-network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  trader-network:
    driver: bridge
